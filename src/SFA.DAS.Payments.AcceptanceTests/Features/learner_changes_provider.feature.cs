// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Apprentice changes provider and there is a gap between commitments")]
    public partial class ApprenticeChangesProviderAndThereIsAGapBetweenCommitmentsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "learner_changes_provider.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Apprentice changes provider and there is a gap between commitments", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Apprentice changes provider but remains with the same employer, and there is a ga" +
            "p between the two learning spells")]
        public virtual void ApprenticeChangesProviderButRemainsWithTheSameEmployerAndThereIsAGapBetweenTheTwoLearningSpells()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apprentice changes provider but remains with the same employer, and there is a ga" +
                    "p between the two learning spells", ((string[])(null)));
#line 3
    this.ScenarioSetup(scenarioInfo);
#line 4
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
        testRunner.And("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Provider",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table145.AddRow(new string[] {
                        "1",
                        "1",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "active",
                        "01/08/2017",
                        "04/03/2018"});
            table145.AddRow(new string[] {
                        "1",
                        "2",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "withdrawn",
                        "05/03/2018",
                        ""});
            table145.AddRow(new string[] {
                        "2",
                        "1",
                        "provider b",
                        "learner a",
                        "01/06/2018",
                        "01/11/2018",
                        "4500",
                        "active",
                        "06/06/2018",
                        ""});
#line 6
        testRunner.And("the following commitments exist:", ((string)(null)), table145, "And ");
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        "Provider",
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date"});
            table146.AddRow(new string[] {
                        "provider a",
                        "learner a",
                        "06/08/2017",
                        "08/08/2018",
                        "04/03/2018",
                        "Cancelled",
                        "6000",
                        "06/08/2017",
                        "1500",
                        "06/08/2017"});
            table146.AddRow(new string[] {
                        "provider b",
                        "learner a",
                        "06/06/2018",
                        "20/11/2018",
                        "",
                        "continuing",
                        "3000",
                        "06/06/2018",
                        "1500",
                        "06/06/2018"});
#line 12
        testRunner.When("the providers submit the following ILR files:", ((string)(null)), table146, "When ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 02/18",
                        "06/18 onwards"});
            table147.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        "2"});
#line 17
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table147, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "...",
                        "02/18",
                        "03/18"});
            table148.AddRow(new string[] {
                        "Provider Earned Total",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0"});
            table148.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0"});
            table148.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table148.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "500",
                        "500",
                        "...",
                        "500",
                        "500"});
            table148.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table148.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "500",
                        "500",
                        "...",
                        "500",
                        "500"});
            table148.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0"});
            table148.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table148.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
#line 21
        testRunner.And("the earnings and payments break down for provider a is as follows:", ((string)(null)), table148, "And ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "06/18",
                        "07/18",
                        "08/18",
                        "09/18",
                        "10/18",
                        "11/18"});
            table149.AddRow(new string[] {
                        "Provider Earned Total",
                        "720",
                        "720",
                        "720",
                        "720",
                        "720",
                        "0"});
            table149.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "720",
                        "720",
                        "720",
                        "720",
                        "720",
                        "0"});
            table149.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table149.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "720",
                        "720",
                        "720",
                        "720",
                        "720"});
            table149.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table149.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "720",
                        "720",
                        "720",
                        "720",
                        "720"});
            table149.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "720",
                        "720",
                        "720",
                        "720",
                        "720",
                        "0"});
            table149.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table149.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 33
        testRunner.And("the earnings and payments break down for provider b is as follows:", ((string)(null)), table149, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Apprentice changes provider but remains with the same employer")]
        public virtual void ApprenticeChangesProviderButRemainsWithTheSameEmployer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apprentice changes provider but remains with the same employer", ((string[])(null)));
#line 46
    this.ScenarioSetup(scenarioInfo);
#line 47
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
        testRunner.And("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Provider",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table150.AddRow(new string[] {
                        "1",
                        "1",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "active",
                        "01/08/2017",
                        "04/03/2018"});
            table150.AddRow(new string[] {
                        "1",
                        "2",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "withdrawn",
                        "05/03/2018",
                        ""});
            table150.AddRow(new string[] {
                        "2",
                        "1",
                        "provider b",
                        "learner a",
                        "05/03/2018",
                        "01/08/2018",
                        "4500",
                        "active",
                        "05/03/2018",
                        ""});
#line 49
        testRunner.And("the following commitments exist:", ((string)(null)), table150, "And ");
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "Provider",
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date"});
            table151.AddRow(new string[] {
                        "provider a",
                        "learner a",
                        "06/08/2017",
                        "08/08/2018",
                        "04/03/2018",
                        "withdrawn",
                        "6000",
                        "06/08/2017",
                        "1500",
                        "06/08/2017"});
            table151.AddRow(new string[] {
                        "provider b",
                        "learner a",
                        "05/03/2018",
                        "20/08/2018",
                        "",
                        "continuing",
                        "3000",
                        "05/03/2018",
                        "1500",
                        "05/03/2018"});
#line 54
        testRunner.When("the providers submit the following ILR files:", ((string)(null)), table151, "When ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 02/18",
                        "03/18 onwards"});
            table152.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        "2"});
#line 58
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table152, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "...",
                        "02/18",
                        "03/18"});
            table153.AddRow(new string[] {
                        "Provider Earned Total",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0"});
            table153.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0"});
            table153.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table153.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "500",
                        "500",
                        "...",
                        "500",
                        "500"});
            table153.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table153.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "500",
                        "500",
                        "...",
                        "500",
                        "500"});
            table153.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0"});
            table153.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table153.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
#line 61
        testRunner.And("the earnings and payments break down for provider a is as follows:", ((string)(null)), table153, "And ");
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "03/18",
                        "04/18",
                        "05/18",
                        "06/18",
                        "07/18",
                        "08/18"});
            table154.AddRow(new string[] {
                        "Provider Earned Total",
                        "720",
                        "720",
                        "720",
                        "720",
                        "720",
                        "0"});
            table154.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "720",
                        "720",
                        "720",
                        "720",
                        "720",
                        "0"});
            table154.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table154.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "720",
                        "720",
                        "720",
                        "720",
                        "720"});
            table154.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table154.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "720",
                        "720",
                        "720",
                        "720",
                        "720"});
            table154.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "720",
                        "720",
                        "720",
                        "720",
                        "720",
                        "0"});
            table154.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table154.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 72
        testRunner.And("the earnings and payments break down for provider b is as follows:", ((string)(null)), table154, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Apprentice changes provider but remains with the same employer, ILR changes after" +
            " the new commitment is in place")]
        public virtual void ApprenticeChangesProviderButRemainsWithTheSameEmployerILRChangesAfterTheNewCommitmentIsInPlace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apprentice changes provider but remains with the same employer, ILR changes after" +
                    " the new commitment is in place", ((string[])(null)));
#line 85
    this.ScenarioSetup(scenarioInfo);
#line 86
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
        testRunner.And("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Provider",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table155.AddRow(new string[] {
                        "1",
                        "1",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "active",
                        "01/08/2017",
                        "04/03/2018"});
            table155.AddRow(new string[] {
                        "1",
                        "2",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "withdrawn",
                        "05/03/2018",
                        ""});
            table155.AddRow(new string[] {
                        "2",
                        "1",
                        "provider b",
                        "learner a",
                        "05/03/2018",
                        "01/08/2018",
                        "4500",
                        "active",
                        "05/03/2018",
                        ""});
#line 88
        testRunner.And("the following commitments exist:", ((string)(null)), table155, "And ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        "Provider",
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date"});
            table156.AddRow(new string[] {
                        "provider a",
                        "learner a",
                        "06/08/2017",
                        "08/08/2018",
                        "04/04/2018",
                        "withdrawn",
                        "6000",
                        "06/08/2017",
                        "1500",
                        "06/08/2017"});
            table156.AddRow(new string[] {
                        "provider b",
                        "learner a",
                        "05/04/2018",
                        "08/08/2018",
                        "",
                        "continuing",
                        "3000",
                        "05/04/2018",
                        "1500",
                        "05/04/2018"});
#line 93
        testRunner.When("the providers submit the following ILR files:", ((string)(null)), table156, "When ");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 03/18",
                        "04/18 onwards"});
            table157.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        "2"});
#line 97
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table157, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "...",
                        "02/18",
                        "03/18",
                        "04/18"});
            table158.AddRow(new string[] {
                        "Provider Earned Total",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "500",
                        "0"});
            table158.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0",
                        "0"});
            table158.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0"});
            table158.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "500",
                        "500",
                        "...",
                        "500",
                        "500",
                        "0"});
            table158.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0"});
            table158.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "500",
                        "500",
                        "...",
                        "500",
                        "500",
                        "0"});
            table158.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0",
                        "0"});
            table158.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0"});
            table158.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0"});
#line 100
        testRunner.And("the earnings and payments break down for provider a is as follows:", ((string)(null)), table158, "And ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "04/18",
                        "05/18",
                        "06/18",
                        "07/18",
                        "08/18"});
            table159.AddRow(new string[] {
                        "Provider Earned Total",
                        "900",
                        "900",
                        "900",
                        "900",
                        "0"});
            table159.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "900",
                        "900",
                        "900",
                        "900",
                        "0"});
            table159.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table159.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "900",
                        "900",
                        "900",
                        "900"});
            table159.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table159.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "900",
                        "900",
                        "900",
                        "900"});
            table159.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "900",
                        "900",
                        "900",
                        "900",
                        "0"});
            table159.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table159.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 111
        testRunner.And("the earnings and payments break down for provider b is as follows:", ((string)(null)), table159, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Apprentice changes provider but remains with the same employer, ILR changes befor" +
            "e the new commitment is in place")]
        public virtual void ApprenticeChangesProviderButRemainsWithTheSameEmployerILRChangesBeforeTheNewCommitmentIsInPlace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apprentice changes provider but remains with the same employer, ILR changes befor" +
                    "e the new commitment is in place", ((string[])(null)));
#line 124
    this.ScenarioSetup(scenarioInfo);
#line 125
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
        testRunner.And("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Provider",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table160.AddRow(new string[] {
                        "1",
                        "1",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "active",
                        "01/08/2017",
                        "04/03/2018"});
            table160.AddRow(new string[] {
                        "1",
                        "2",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "withdrawn",
                        "05/03/2018",
                        ""});
            table160.AddRow(new string[] {
                        "2",
                        "1",
                        "provider b",
                        "learner a",
                        "05/03/2018",
                        "01/08/2018",
                        "4500",
                        "active",
                        "05/03/2018",
                        ""});
#line 127
        testRunner.And("the following commitments exist:", ((string)(null)), table160, "And ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "Provider",
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date"});
            table161.AddRow(new string[] {
                        "provider a",
                        "learner a",
                        "06/08/2017",
                        "08/08/2018",
                        "04/02/2018",
                        "withdrawn",
                        "6000",
                        "06/08/2017",
                        "1500",
                        "06/08/2017"});
            table161.AddRow(new string[] {
                        "provider b",
                        "learner a",
                        "05/02/2018",
                        "20/08/2018",
                        "",
                        "continuing",
                        "3000",
                        "05/02/2018",
                        "1500",
                        "05/02/2018"});
#line 132
        testRunner.When("the providers submit the following ILR files:", ((string)(null)), table161, "When ");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 01/18",
                        "02/18 onwards"});
            table162.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        ""});
#line 136
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table162, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "...",
                        "01/18",
                        "02/18"});
            table163.AddRow(new string[] {
                        "Provider Earned Total",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0"});
            table163.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0"});
            table163.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table163.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "500",
                        "500",
                        "...",
                        "500",
                        "500"});
            table163.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table163.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "500",
                        "500",
                        "...",
                        "500",
                        "500"});
            table163.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "500",
                        "500",
                        "500",
                        "...",
                        "500",
                        "0"});
            table163.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table163.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
#line 139
        testRunner.And("the earnings and payments break down for provider a is as follows:", ((string)(null)), table163, "And ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "02/18",
                        "03/18",
                        "04/18",
                        "...",
                        "07/18",
                        "08/18"});
            table164.AddRow(new string[] {
                        "Provider Earned Total",
                        "600",
                        "600",
                        "600",
                        "...",
                        "600",
                        "0"});
            table164.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table164.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table164.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table164.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table164.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table164.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table164.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
            table164.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0"});
#line 150
        testRunner.And("the earnings and payments break down for provider b is as follows:", ((string)(null)), table164, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
