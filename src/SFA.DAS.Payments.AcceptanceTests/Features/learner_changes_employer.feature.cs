// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Provider earnings and payments where a learner changes employers")]
    public partial class ProviderEarningsAndPaymentsWhereALearnerChangesEmployersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "learner_changes_employer.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Provider earnings and payments where a learner changes employers", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
    #line 4
        testRunner.Given("the apprenticeship funding band maximum is 17000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, and there is a change to" +
            " the Negotiated Cost which happens at the end of the month")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableAndThereIsAChangeToTheNegotiatedCostWhichHappensAtTheEndOfTheMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, and there is a change to" +
                    " the Negotiated Cost which happens at the end of the month", ((string[])(null)));
#line 6
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 7
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table183.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table183.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "01/11/2017"});
#line 10
        testRunner.And("the learner changes employers", ((string)(null)), table183, "And ");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table184.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "active",
                        "01/08/2017",
                        "31/10/2017"});
            table184.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "cancelled",
                        "01/11/2017",
                        ""});
            table184.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "learner a",
                        "01/11/2017",
                        "31/08/2018",
                        "5625",
                        "active",
                        "01/11/2017",
                        ""});
#line 14
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table184, "And ");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table185.AddRow(new string[] {
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "01/08/2017",
                        "3000",
                        "01/08/2017",
                        "5000",
                        "01/11/2017",
                        "625",
                        "01/11/2017"});
#line 19
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table185, "When ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table186.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        "XYZ"});
#line 22
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table186, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table187.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table187.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table187.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table187.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table187.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "1000",
                        "500"});
            table187.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table187.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table187.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table187.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table187.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table187.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 25
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table187, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, and there is a change to" +
            " the Negotiated Cost which happens mid month")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableAndThereIsAChangeToTheNegotiatedCostWhichHappensMidMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, and there is a change to" +
                    " the Negotiated Cost which happens mid month", ((string[])(null)));
#line 40
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 41
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table188.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "04/08/2017"});
            table188.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "10/11/2017"});
#line 44
        testRunner.And("the learner changes employers", ((string)(null)), table188, "And ");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table189.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "active",
                        "01/08/2017",
                        "31/10/2017"});
            table189.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "cancelled",
                        "01/11/2017",
                        ""});
            table189.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "learner a",
                        "01/11/2017",
                        "31/08/2018",
                        "5625",
                        "active",
                        "01/11/2017",
                        ""});
#line 48
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table189, "And ");
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table190.AddRow(new string[] {
                        "learner a",
                        "04/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "04/08/2017",
                        "3000",
                        "04/08/2017",
                        "5000",
                        "10/11/2017",
                        "625",
                        "10/11/2017"});
#line 54
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table190, "When ");
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table191.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        "XYZ"});
#line 57
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table191, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table192.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table192.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table192.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table192.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table192.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "1000",
                        "500"});
            table192.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table192.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table192.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table192.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table192.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table192.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 60
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table192, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, and there is a change to" +
            " the Negotiated Cost earlier than expected")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableAndThereIsAChangeToTheNegotiatedCostEarlierThanExpected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, and there is a change to" +
                    " the Negotiated Cost earlier than expected", ((string[])(null)));
#line 75
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 76
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table193.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "04/08/2017"});
            table193.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "10/11/2017"});
#line 79
        testRunner.And("the learner changes employers", ((string)(null)), table193, "And ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table194.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "active",
                        "01/08/2017",
                        "31/10/2017"});
            table194.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "cancelled",
                        "01/11/2017",
                        ""});
            table194.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "learner a",
                        "01/11/2017",
                        "31/08/2018",
                        "5625",
                        "active",
                        "01/11/2017",
                        ""});
#line 83
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table194, "And ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table195.AddRow(new string[] {
                        "learner a",
                        "04/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "04/08/2017",
                        "3000",
                        "04/08/2017",
                        "5000",
                        "25/10/2017",
                        "625",
                        "25/10/2017"});
#line 88
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table195, "When ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 09/17",
                        "10/17 onwards"});
            table196.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        ""});
#line 91
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table196, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table197.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "450",
                        "450",
                        "450"});
            table197.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "450",
                        "450",
                        "450"});
            table197.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table197.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table197.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table197.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table197.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table197.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table197.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table197.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0"});
            table197.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 94
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table197, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, where a learner switches" +
            " from DAS to Non Das employer at the end of month")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableWhereALearnerSwitchesFromDASToNonDasEmployerAtTheEndOfMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, where a learner switches" +
                    " from DAS to Non Das employer at the end of month", ((string[])(null)));
#line 109
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 110
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table198.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "03/08/2017"});
            table198.AddRow(new string[] {
                        "XYZ",
                        "Non DAS",
                        "03/11/2017"});
#line 112
        testRunner.And("the learner changes employers", ((string)(null)), table198, "And ");
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table199.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "03/08/2017",
                        "04/08/2018",
                        "15000",
                        "active",
                        "03/08/2017",
                        "02/11/2017"});
            table199.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "03/08/2017",
                        "04/08/2018",
                        "15000",
                        "withdrawn",
                        "03/11/2017",
                        ""});
#line 116
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table199, "And ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table200.AddRow(new string[] {
                        "learner a",
                        "03/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017",
                        "4500",
                        "03/11/2017",
                        "1125",
                        "03/11/2017"});
#line 120
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table200, "When ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        "contract type",
                        "date from",
                        "date to"});
            table201.AddRow(new string[] {
                        "DAS",
                        "03/08/2017",
                        "02/11/2017"});
            table201.AddRow(new string[] {
                        "Non DAS",
                        "03/11/2017",
                        "04/08/2018"});
#line 123
        testRunner.And("the Contract type in the ILR is:", ((string)(null)), table201, "And ");
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table202.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        ""});
#line 127
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table202, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table203.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table203.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "450",
                        "450"});
            table203.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table203.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "50",
                        "50"});
            table203.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "450"});
            table203.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table203.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "50"});
            table203.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table203.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table203.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table203.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "450",
                        "450"});
#line 130
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table203, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, commitment entered for a" +
            " new employer in the middle of the month, and there is a change to the employer " +
            "and negotiated cost in the middle of a month in the ILR")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableCommitmentEnteredForANewEmployerInTheMiddleOfTheMonthAndThereIsAChangeToTheEmployerAndNegotiatedCostInTheMiddleOfAMonthInTheILR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, commitment entered for a" +
                    " new employer in the middle of the month, and there is a change to the employer " +
                    "and negotiated cost in the middle of a month in the ILR", ((string[])(null)));
#line 148
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 149
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 150
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table204.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table204.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "15/11/2017"});
#line 152
        testRunner.And("the learner changes employers", ((string)(null)), table204, "And ");
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table205.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "15000",
                        "active",
                        "01/08/2017",
                        "14/11/2017"});
            table205.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "15000",
                        "withdrawn",
                        "15/11/2017",
                        ""});
            table205.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "learner a",
                        "15/11/2017",
                        "28/08/2018",
                        "5625",
                        "active",
                        "15/11/2017",
                        ""});
#line 156
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table205, "And ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table206.AddRow(new string[] {
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "01/08/2017",
                        "3000",
                        "01/08/2017",
                        "5000",
                        "15/11/2017",
                        "625",
                        "15/11/2017"});
#line 161
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table206, "When ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table207.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        "XYZ"});
#line 164
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table207, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table208.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table208.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table208.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table208.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table208.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "1000",
                        "500"});
            table208.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table208.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table208.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table208.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table208.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table208.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 167
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table208, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, commitment entered for a" +
            " new employer in the middle of the month with gap, and there is a change to the " +
            "employer and negotiated cost in the middle of a month in the ILR")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableCommitmentEnteredForANewEmployerInTheMiddleOfTheMonthWithGapAndThereIsAChangeToTheEmployerAndNegotiatedCostInTheMiddleOfAMonthInTheILR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, commitment entered for a" +
                    " new employer in the middle of the month with gap, and there is a change to the " +
                    "employer and negotiated cost in the middle of a month in the ILR", ((string[])(null)));
#line 182
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 183
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 184
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table209.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table209.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "15/11/2017"});
#line 186
        testRunner.And("the learner changes employers", ((string)(null)), table209, "And ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table210.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "15000",
                        "active",
                        "01/08/2017",
                        "14/11/2017"});
            table210.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "15000",
                        "withdrawn",
                        "15/11/2017",
                        ""});
            table210.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "learner a",
                        "15/11/2017",
                        "28/08/2018",
                        "5625",
                        "active",
                        "15/11/2017",
                        ""});
#line 190
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table210, "And ");
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table211.AddRow(new string[] {
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "01/08/2017",
                        "3000",
                        "01/08/2017",
                        "5000",
                        "25/11/2017",
                        "625",
                        "25/11/2017"});
#line 195
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table211, "When ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table212.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        "XYZ"});
#line 198
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table212, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table213.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table213.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table213.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table213.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table213.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "1000",
                        "500"});
            table213.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table213.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table213.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table213.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table213.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table213.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 201
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table213, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(@"Earnings and payments for a DAS learner, levy available, commitment entered for a new employer in the middle of the month and ILR file is submitted before new price episode, and there is a change to the employer and negotiated cost in the middle of a month in the ILR")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableCommitmentEnteredForANewEmployerInTheMiddleOfTheMonthAndILRFileIsSubmittedBeforeNewPriceEpisodeAndThereIsAChangeToTheEmployerAndNegotiatedCostInTheMiddleOfAMonthInTheILR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"Earnings and payments for a DAS learner, levy available, commitment entered for a new employer in the middle of the month and ILR file is submitted before new price episode, and there is a change to the employer and negotiated cost in the middle of a month in the ILR", ((string[])(null)));
#line 216
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 217
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 218
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table214.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table214.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "15/11/2017"});
#line 220
        testRunner.And("the learner changes employers", ((string)(null)), table214, "And ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table215.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "15000",
                        "active",
                        "01/08/2017",
                        "14/11/2017"});
            table215.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "15000",
                        "withdrawn",
                        "15/11/2017",
                        ""});
            table215.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "learner a",
                        "15/11/2017",
                        "28/08/2018",
                        "5625",
                        "active",
                        "15/11/2017",
                        ""});
#line 224
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table215, "And ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table216.AddRow(new string[] {
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "01/08/2017",
                        "3000",
                        "01/08/2017",
                        "5000",
                        "05/11/2017",
                        "625",
                        "25/11/2017"});
#line 229
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table216, "When ");
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table217.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        ""});
#line 232
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table217, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table218.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table218.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table218.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table218.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table218.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table218.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table218.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table218.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table218.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table218.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table218.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 235
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table218, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Apprentice changes from a non-DAS to DAS employer, levy is available for the DAS " +
            "employer")]
        public virtual void ApprenticeChangesFromANon_DASToDASEmployerLevyIsAvailableForTheDASEmployer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apprentice changes from a non-DAS to DAS employer, levy is available for the DAS " +
                    "employer", ((string[])(null)));
#line 250
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 251
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 252
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table219.AddRow(new string[] {
                        "ABC",
                        "Non DAS",
                        "06/08/2017"});
            table219.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "01/04/2018"});
#line 253
        testRunner.And("the learner changes employers", ((string)(null)), table219, "And ");
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table220.AddRow(new string[] {
                        "XYZ",
                        "1",
                        "1",
                        "learner a",
                        "01/04/2018",
                        "01/08/2018",
                        "3500",
                        "active",
                        "01/04/2018",
                        ""});
#line 257
        testRunner.And("the following commitments exist on 03/04/2017:", ((string)(null)), table220, "And ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table221.AddRow(new string[] {
                        "learner a",
                        "06/08/2017",
                        "08/08/2018",
                        "",
                        "continuing",
                        "5000",
                        "06/08/2017",
                        "1000",
                        "06/08/2017",
                        "2500",
                        "01/04/2018",
                        "1000",
                        "01/04/2018"});
#line 260
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table221, "When ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        "contract type",
                        "date from",
                        "date to"});
            table222.AddRow(new string[] {
                        "Non DAS",
                        "06/08/2017",
                        "31/03/2018"});
            table222.AddRow(new string[] {
                        "DAS",
                        "01/04/2018",
                        "08/08/2018"});
#line 263
        testRunner.And("the Contract type in the ILR is:", ((string)(null)), table222, "And ");
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 03/18",
                        "04/18 onwards"});
            table223.AddRow(new string[] {
                        "matching commitment",
                        "",
                        "XYZ"});
#line 267
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table223, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "...",
                        "03/18",
                        "04/18",
                        "05/18",
                        "06/18",
                        "07/18",
                        "08/18"});
            table224.AddRow(new string[] {
                        "Provider Earned Total",
                        "400",
                        "400",
                        "400",
                        "...",
                        "400",
                        "700",
                        "700",
                        "700",
                        "700",
                        "0"});
            table224.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "360",
                        "360",
                        "360",
                        "...",
                        "360",
                        "700",
                        "700",
                        "700",
                        "700",
                        "0"});
            table224.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "40",
                        "40",
                        "40",
                        "...",
                        "40",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table224.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table224.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "360",
                        "360",
                        "...",
                        "360",
                        "360",
                        "700",
                        "700",
                        "700",
                        "700"});
            table224.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "40",
                        "40",
                        "...",
                        "40",
                        "40",
                        "0",
                        "0",
                        "0",
                        "0"});
            table224.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table224.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "700",
                        "700",
                        "700",
                        "700"});
            table224.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "700",
                        "700",
                        "700",
                        "700",
                        "0"});
            table224.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table224.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "360",
                        "360",
                        "360",
                        "...",
                        "360",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 270
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table224, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, where a total cost chang" +
            "es during the programme and ILR is submitted late")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableWhereATotalCostChangesDuringTheProgrammeAndILRIsSubmittedLate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, where a total cost chang" +
                    "es during the programme and ILR is submitted late", ((string[])(null)));
#line 285
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 286
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 287
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 288
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table225.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "03/08/2017"});
            table225.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "03/11/2017"});
#line 289
        testRunner.And("the learner changes employers", ((string)(null)), table225, "And ");
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table226.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "active",
                        "01/08/2017",
                        "31/10/2017"});
            table226.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "cancelled",
                        "01/11/2017",
                        ""});
            table226.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "learner a",
                        "01/11/2017",
                        "31/08/2018",
                        "5625",
                        "active",
                        "01/11/2017",
                        ""});
#line 293
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table226, "And ");
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table227.AddRow(new string[] {
                        "learner a",
                        "03/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017",
                        "5000",
                        "03/11/2017",
                        "625",
                        "03/11/2017"});
#line 298
        testRunner.When("an ILR file is submitted for the first time on 28/11/17 with the following data:", ((string)(null)), table227, "When ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table228.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table228.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table228.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table228.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table228.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "0",
                        "0",
                        "0",
                        "3500"});
            table228.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table228.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table228.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "3000"});
            table228.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table228.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table228.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 301
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table228, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, and they have a break in" +
            " learning at the end of a month and return at the start of a later month with a " +
            "different employer")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableAndTheyHaveABreakInLearningAtTheEndOfAMonthAndReturnAtTheStartOfALaterMonthWithADifferentEmployer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, and they have a break in" +
                    " learning at the end of a month and return at the start of a later month with a " +
                    "different employer", ((string[])(null)));
#line 317
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 319
        testRunner.Given("the apprenticeship funding band maximum is 17000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 320
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 321
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table229.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table229.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "01/01/2018"});
#line 323
        testRunner.And("the learner changes employers", ((string)(null)), table229, "And ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table230.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "active",
                        "01/08/2017",
                        "31/10/2017"});
            table230.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "cancelled",
                        "01/11/2017",
                        ""});
            table230.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "learner a",
                        "01/01/2018",
                        "31/10/2018",
                        "5625",
                        "active",
                        "01/01/2018",
                        ""});
#line 327
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table230, "And ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table231.AddRow(new string[] {
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "31/10/2017",
                        "withdrawn",
                        "12000",
                        "01/08/2017",
                        "3000",
                        "01/08/2017",
                        "",
                        "",
                        "",
                        ""});
            table231.AddRow(new string[] {
                        "learner a",
                        "01/01/2018",
                        "04/10/2018",
                        "",
                        "continuing",
                        "",
                        "",
                        "",
                        "",
                        "5000",
                        "01/01/2018",
                        "625",
                        "01/01/2018"});
#line 332
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table231, "When ");
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "01/18 onwards"});
            table232.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        "XYZ"});
#line 337
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table232, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "01/18",
                        "02/18",
                        "03/18"});
            table233.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "500",
                        "500",
                        "500"});
            table233.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "500",
                        "500",
                        "500"});
            table233.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table233.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table233.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "500",
                        "500"});
            table233.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table233.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table233.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0",
                        "0"});
            table233.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500",
                        "500"});
            table233.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "500",
                        "500",
                        "500"});
            table233.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 340
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table233, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, and they have a break in" +
            " learning in the middle of a month and return in the middle of a later month wit" +
            "h a different employer")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableAndTheyHaveABreakInLearningInTheMiddleOfAMonthAndReturnInTheMiddleOfALaterMonthWithADifferentEmployer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, and they have a break in" +
                    " learning in the middle of a month and return in the middle of a later month wit" +
                    "h a different employer", ((string[])(null)));
#line 355
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 357
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 358
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table234.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table234.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "01/01/2018"});
#line 360
        testRunner.And("the learner changes employers", ((string)(null)), table234, "And ");
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table235.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "active",
                        "01/08/2017",
                        "31/10/2017"});
            table235.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "cancelled",
                        "01/11/2017",
                        ""});
            table235.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "learner a",
                        "01/01/2018",
                        "31/10/2018",
                        "5625",
                        "active",
                        "01/01/2018",
                        ""});
#line 364
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table235, "And ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table236.AddRow(new string[] {
                        "learner a",
                        "03/08/2017",
                        "04/08/2018",
                        "18/11/2017",
                        "withdrawn",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017",
                        "",
                        "",
                        "",
                        ""});
            table236.AddRow(new string[] {
                        "learner a",
                        "11/01/2018",
                        "04/10/2018",
                        "",
                        "continuing",
                        "",
                        "",
                        "",
                        "",
                        "5000",
                        "11/01/2018",
                        "625",
                        "11/01/2018"});
#line 369
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table236, "When ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "01/18 onwards"});
            table237.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        "XYZ"});
#line 374
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table237, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "01/18",
                        "02/18",
                        "03/18"});
            table238.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "500",
                        "500",
                        "500"});
            table238.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "500",
                        "500",
                        "500"});
            table238.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table238.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table238.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "500",
                        "500"});
            table238.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table238.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table238.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0",
                        "0"});
            table238.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500",
                        "500"});
            table238.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "500",
                        "500",
                        "500"});
            table238.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 377
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table238, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, and they have a break in" +
            " learning in the middle of a month and return in the middle of a later month wit" +
            "h a different employer - before the second commitment is in place")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableAndTheyHaveABreakInLearningInTheMiddleOfAMonthAndReturnInTheMiddleOfALaterMonthWithADifferentEmployer_BeforeTheSecondCommitmentIsInPlace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, and they have a break in" +
                    " learning in the middle of a month and return in the middle of a later month wit" +
                    "h a different employer - before the second commitment is in place", ((string[])(null)));
#line 391
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 393
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 394
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 395
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table239.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table239.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "01/01/2018"});
#line 396
        testRunner.And("the learner changes employers", ((string)(null)), table239, "And ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table240.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "active",
                        "01/08/2017",
                        "31/10/2017"});
            table240.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "15000",
                        "cancelled",
                        "01/11/2017",
                        ""});
            table240.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "learner a",
                        "01/01/2018",
                        "31/10/2018",
                        "5625",
                        "active",
                        "01/01/2018",
                        ""});
#line 400
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table240, "And ");
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table241.AddRow(new string[] {
                        "learner a",
                        "03/08/2017",
                        "04/08/2018",
                        "18/11/2017",
                        "withdrawn",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017",
                        "",
                        "",
                        "",
                        ""});
            table241.AddRow(new string[] {
                        "learner a",
                        "21/12/2017",
                        "04/09/2018",
                        "",
                        "continuing",
                        "",
                        "",
                        "",
                        "",
                        "5000",
                        "21/12/2017",
                        "625",
                        "21/12/2017"});
#line 405
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table241, "When ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "12/17 onwards"});
            table242.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        ""});
#line 410
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table242, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "01/18",
                        "02/18"});
            table243.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "500",
                        "500",
                        "500"});
            table243.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0",
                        "0"});
            table243.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table243.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table243.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0"});
            table243.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table243.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table243.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0"});
            table243.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table243.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0",
                        "0"});
            table243.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 413
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table243, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1 learner aged 16-18, levy available, changes employer, earns incentive payment i" +
            "n the transfer month - and the date at which the incentive is earned is before t" +
            "he transfer date")]
        public virtual void _1LearnerAged16_18LevyAvailableChangesEmployerEarnsIncentivePaymentInTheTransferMonth_AndTheDateAtWhichTheIncentiveIsEarnedIsBeforeTheTransferDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 learner aged 16-18, levy available, changes employer, earns incentive payment i" +
                    "n the transfer month - and the date at which the incentive is earned is before t" +
                    "he transfer date", ((string[])(null)));
#line 430
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 432
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 433
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 434
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table244.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "06/08/2017"});
            table244.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "15/11/2017"});
#line 435
        testRunner.And("the learner changes employers", ((string)(null)), table244, "And ");
#line hidden
            TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "Provider",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table245.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "active",
                        "01/08/2017",
                        "14/11/2017"});
            table245.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "withdrawn",
                        "15/11/2017",
                        ""});
            table245.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "provider a",
                        "learner a",
                        "15/11/2017",
                        "01/08/2018",
                        "5625",
                        "active",
                        "15/11/2017",
                        ""});
#line 439
        testRunner.And("the following commitments exist:", ((string)(null)), table245, "And ");
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        "Provider",
                        "learner type",
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table246.AddRow(new string[] {
                        "provider a",
                        "16-18 programme only DAS",
                        "learner a",
                        "06/08/2017",
                        "08/08/2018",
                        "",
                        "continuing",
                        "6000",
                        "06/08/2017",
                        "1500",
                        "06/08/2017",
                        "4000",
                        "15/11/2017",
                        "1625",
                        "15/11/2017"});
#line 445
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table246, "When ");
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table247.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        "2"});
#line 449
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table247, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "01/18"});
            table248.AddRow(new string[] {
                        "Provider Earned Total",
                        "500",
                        "500",
                        "500",
                        "1500",
                        "500",
                        "500"});
            table248.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "500",
                        "500",
                        "500",
                        "1500",
                        "500",
                        "500"});
            table248.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table248.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table248.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "500",
                        "500",
                        "500",
                        "1500",
                        "500"});
            table248.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table248.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table248.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "500",
                        "500",
                        "500",
                        "0",
                        "0"});
            table248.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500",
                        "500"});
            table248.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "500",
                        "500",
                        "500",
                        "500",
                        "500",
                        "500"});
            table248.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table248.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table248.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "1000",
                        "0",
                        "0"});
#line 453
        testRunner.And("the earnings and payments break down for provider a is as follows:", ((string)(null)), table248, "And ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "01/18"});
            table249.AddRow(new string[] {
                        "On-program",
                        "500",
                        "500",
                        "500",
                        "500",
                        "500"});
            table249.AddRow(new string[] {
                        "Completion",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table249.AddRow(new string[] {
                        "Balancing",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table249.AddRow(new string[] {
                        "Employer ABC 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "500",
                        "0"});
            table249.AddRow(new string[] {
                        "Employer XYZ 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table249.AddRow(new string[] {
                        "Provider 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "500",
                        "0"});
#line 469
        testRunner.And("the transaction types for the payments for provider a are:", ((string)(null)), table249, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1 learner aged 16-18, levy available, changes employer, earns incentive payment i" +
            "n the commitment transfer month - and the employer transfer is recorded on the I" +
            "LR in a later month")]
        public virtual void _1LearnerAged16_18LevyAvailableChangesEmployerEarnsIncentivePaymentInTheCommitmentTransferMonth_AndTheEmployerTransferIsRecordedOnTheILRInALaterMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 learner aged 16-18, levy available, changes employer, earns incentive payment i" +
                    "n the commitment transfer month - and the employer transfer is recorded on the I" +
                    "LR in a later month", ((string[])(null)));
#line 479
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 481
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 482
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 483
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table250.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "06/08/2017"});
            table250.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "15/12/2017"});
#line 484
        testRunner.And("the learner changes employers", ((string)(null)), table250, "And ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "Provider",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table251.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "active",
                        "01/08/2017",
                        "14/11/2017"});
            table251.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "withdrawn",
                        "15/11/2017",
                        ""});
            table251.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "provider a",
                        "learner a",
                        "15/11/2017",
                        "01/08/2018",
                        "5625",
                        "active",
                        "15/11/2017",
                        ""});
#line 488
        testRunner.And("the following commitments exist:", ((string)(null)), table251, "And ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "Provider",
                        "learner type",
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table252.AddRow(new string[] {
                        "provider a",
                        "16-18 programme only DAS",
                        "learner a",
                        "06/08/2017",
                        "08/08/2018",
                        "",
                        "continuing",
                        "6000",
                        "06/08/2017",
                        "1500",
                        "06/08/2017",
                        "4000",
                        "15/12/2017",
                        "1625",
                        "15/12/2017"});
#line 494
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table252, "When ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 10/17",
                        "12/17 onwards"});
            table253.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        "2"});
#line 498
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table253, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "01/18"});
            table254.AddRow(new string[] {
                        "Provider Earned Total",
                        "500",
                        "500",
                        "500",
                        "1500",
                        "562.50",
                        "562.50"});
            table254.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "500",
                        "500",
                        "500",
                        "1000",
                        "562.50",
                        "562.50"});
            table254.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table254.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table254.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "500",
                        "500",
                        "500",
                        "1000",
                        "562.50"});
            table254.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table254.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table254.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "500",
                        "500",
                        "500",
                        "0",
                        "0"});
            table254.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "562.50"});
            table254.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "500",
                        "500",
                        "500",
                        "0",
                        "562.50",
                        "562.50"});
            table254.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table254.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table254.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "1000",
                        "0",
                        "0"});
#line 502
        testRunner.And("the earnings and payments break down for provider a is as follows:", ((string)(null)), table254, "And ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "01/18"});
            table255.AddRow(new string[] {
                        "On-program",
                        "500",
                        "500",
                        "500",
                        "0",
                        "562.50"});
            table255.AddRow(new string[] {
                        "Completion",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table255.AddRow(new string[] {
                        "Balancing",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table255.AddRow(new string[] {
                        "Employer ABC 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "500",
                        "0"});
            table255.AddRow(new string[] {
                        "Employer XYZ 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table255.AddRow(new string[] {
                        "Provider 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "500",
                        "0"});
#line 518
         testRunner.And("the transaction types for the payments for provider a are:", ((string)(null)), table255, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1 learner aged 16-18, levy available, changes employer, earns incentive payment i" +
            "n the commitment transfer month - and the ILR transfer happens at an earlier poi" +
            "nt than the commitment  changes")]
        public virtual void _1LearnerAged16_18LevyAvailableChangesEmployerEarnsIncentivePaymentInTheCommitmentTransferMonth_AndTheILRTransferHappensAtAnEarlierPointThanTheCommitmentChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 learner aged 16-18, levy available, changes employer, earns incentive payment i" +
                    "n the commitment transfer month - and the ILR transfer happens at an earlier poi" +
                    "nt than the commitment  changes", ((string[])(null)));
#line 528
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 530
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 531
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 532
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table256.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "06/08/2017"});
            table256.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "09/11/2017"});
#line 533
        testRunner.And("the learner changes employers", ((string)(null)), table256, "And ");
#line hidden
            TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "commitment Id",
                        "version Id",
                        "Provider",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table257.AddRow(new string[] {
                        "ABC",
                        "1",
                        "1",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "active",
                        "01/08/2017",
                        "14/11/2017"});
            table257.AddRow(new string[] {
                        "ABC",
                        "1",
                        "2",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "7500",
                        "withdrawn",
                        "15/11/2017",
                        ""});
            table257.AddRow(new string[] {
                        "XYZ",
                        "2",
                        "1",
                        "provider a",
                        "learner a",
                        "15/11/2017",
                        "01/08/2018",
                        "5625",
                        "active",
                        "15/11/2017",
                        ""});
#line 537
        testRunner.And("the following commitments exist:", ((string)(null)), table257, "And ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        "Provider",
                        "learner type",
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table258.AddRow(new string[] {
                        "provider a",
                        "16-18 programme only DAS",
                        "learner a",
                        "06/08/2017",
                        "08/08/2018",
                        "",
                        "continuing",
                        "6000",
                        "06/08/2017",
                        "1500",
                        "06/08/2017",
                        "4000",
                        "09/11/2017",
                        "1625",
                        "09/11/2017"});
#line 543
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table258, "When ");
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table259.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        ""});
#line 547
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table259, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "01/18"});
            table260.AddRow(new string[] {
                        "Provider Earned Total",
                        "500",
                        "500",
                        "500",
                        "1500",
                        "500",
                        "500"});
            table260.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "500",
                        "500",
                        "500",
                        "1000",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "500",
                        "500",
                        "500",
                        "1000",
                        "0"});
            table260.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "500",
                        "500",
                        "500",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "500",
                        "500",
                        "500",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "1000",
                        "0",
                        "0"});
#line 551
        testRunner.And("the earnings and payments break down for provider a is as follows:", ((string)(null)), table260, "And ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "01/18"});
            table261.AddRow(new string[] {
                        "On-program",
                        "500",
                        "500",
                        "500",
                        "0",
                        "0"});
            table261.AddRow(new string[] {
                        "Completion",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table261.AddRow(new string[] {
                        "Balancing",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table261.AddRow(new string[] {
                        "Employer ABC 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "500",
                        "0"});
            table261.AddRow(new string[] {
                        "Employer XYZ 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table261.AddRow(new string[] {
                        "Provider 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "500",
                        "0"});
#line 567
         testRunner.And("the transaction types for the payments for provider a are:", ((string)(null)), table261, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AC1- Provider earnings and payments where learner changes employer and there is a" +
            " gap between commitments - provider receives payment during the gap as they amen" +
            "d the ACT code and employment status code correctly.")]
        [NUnit.Framework.CategoryAttribute("LearnerChangesEmployerGapInCommitments")]
        public virtual void AC1_ProviderEarningsAndPaymentsWhereLearnerChangesEmployerAndThereIsAGapBetweenCommitments_ProviderReceivesPaymentDuringTheGapAsTheyAmendTheACTCodeAndEmploymentStatusCodeCorrectly_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC1- Provider earnings and payments where learner changes employer and there is a" +
                    " gap between commitments - provider receives payment during the gap as they amen" +
                    "d the ACT code and employment status code correctly.", new string[] {
                        "LearnerChangesEmployerGapInCommitments"});
#line 579
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 580
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 581
        testRunner.And("the apprenticeship funding band maximum is 17000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 582
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 583
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table262.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "03/08/2017"});
            table262.AddRow(new string[] {
                        "No employer",
                        "Non-DAS",
                        "03/10/2017"});
            table262.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "03/11/2017"});
#line 584
        testRunner.And("the learner changes employers", ((string)(null)), table262, "And ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Employer",
                        "Provider",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table263.AddRow(new string[] {
                        "1",
                        "1",
                        "ABC",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "15000",
                        "Active",
                        "01/08/2017",
                        "02/10/2017"});
            table263.AddRow(new string[] {
                        "1",
                        "2",
                        "ABC",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "15000",
                        "Withdrawn",
                        "03/10/2017",
                        ""});
            table263.AddRow(new string[] {
                        "2",
                        "1",
                        "XYZ",
                        "provider a",
                        "learner a",
                        "01/11/2017",
                        "04/08/2018",
                        "5625",
                        "Active",
                        "01/11/2017",
                        ""});
#line 589
        testRunner.And("the following commitments exist:", ((string)(null)), table263, "And ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "Provider",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table264.AddRow(new string[] {
                        "learner a",
                        "provider a",
                        "03/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017",
                        "4500",
                        "03/11/2017",
                        "1125",
                        "03/11/2017"});
#line 594
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table264, "When ");
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        "contract type",
                        "date from",
                        "date to"});
            table265.AddRow(new string[] {
                        "DAS",
                        "03/08/2017",
                        "02/10/2017"});
            table265.AddRow(new string[] {
                        "Non DAS",
                        "03/10/2017",
                        "02/11/2017"});
            table265.AddRow(new string[] {
                        "DAS",
                        "03/11/2017",
                        "04/08/2018"});
#line 597
        testRunner.And("the Contract type in the ILR is:", ((string)(null)), table265, "And ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Employment Status",
                        "Employment Status Applies"});
            table266.AddRow(new string[] {
                        "ABC",
                        "in paid employment",
                        "02/08/2017"});
            table266.AddRow(new string[] {
                        "",
                        "not in paid employment",
                        "03/10/2017"});
            table266.AddRow(new string[] {
                        "XYZ",
                        "in paid employment",
                        "03/11/2017"});
#line 602
        testRunner.And("the employment status in the ILR is:", ((string)(null)), table266, "And ");
#line hidden
            TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 09/17",
                        "10/17",
                        "11/17 onwards"});
            table267.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        "N/A",
                        "2"});
#line 608
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table267, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table268.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table268.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "500"});
            table268.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table268.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table268.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "0",
                        "500",
                        "500"});
            table268.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table268.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "1000",
                        "0",
                        "0"});
#line 611
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table268, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AC2- Provider earnings and payments where learner changes employer and there is a" +
            " gap between commitments - provider receives no payment during the gap as they d" +
            "o not change the ACT code or employment status on the ILR")]
        [NUnit.Framework.CategoryAttribute("LearnerChangesEmployerGapInCommitments")]
        public virtual void AC2_ProviderEarningsAndPaymentsWhereLearnerChangesEmployerAndThereIsAGapBetweenCommitments_ProviderReceivesNoPaymentDuringTheGapAsTheyDoNotChangeTheACTCodeOrEmploymentStatusOnTheILR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC2- Provider earnings and payments where learner changes employer and there is a" +
                    " gap between commitments - provider receives no payment during the gap as they d" +
                    "o not change the ACT code or employment status on the ILR", new string[] {
                        "LearnerChangesEmployerGapInCommitments"});
#line 625
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 626
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 627
        testRunner.And("the apprenticeship funding band maximum is 17000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 628
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 629
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table269.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "03/08/2017"});
            table269.AddRow(new string[] {
                        "No employer",
                        "Non-DAS",
                        "03/10/2017"});
            table269.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "03/11/2017"});
#line 630
        testRunner.And("the learner changes employers", ((string)(null)), table269, "And ");
#line hidden
            TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Employer",
                        "Provider",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table270.AddRow(new string[] {
                        "1",
                        "1",
                        "ABC",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "15000",
                        "Active",
                        "01/08/2017",
                        "02/10/2017"});
            table270.AddRow(new string[] {
                        "1",
                        "2",
                        "ABC",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "15000",
                        "Withdrawn",
                        "03/10/2017",
                        ""});
            table270.AddRow(new string[] {
                        "2",
                        "1",
                        "XYZ",
                        "provider a",
                        "learner a",
                        "01/11/2017",
                        "04/08/2018",
                        "5625",
                        "Active",
                        "01/11/2017",
                        ""});
#line 635
        testRunner.And("the following commitments exist:", ((string)(null)), table270, "And ");
#line hidden
            TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "Provider",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table271.AddRow(new string[] {
                        "learner a",
                        "provider a",
                        "03/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017",
                        "4500",
                        "03/11/2017",
                        "1125",
                        "03/11/2017"});
#line 640
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table271, "When ");
#line hidden
            TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                        "contract type",
                        "date from",
                        "date to"});
            table272.AddRow(new string[] {
                        "DAS",
                        "03/08/2017",
                        "04/08/2018"});
#line 643
        testRunner.And("the Contract type in the ILR is:", ((string)(null)), table272, "And ");
#line hidden
            TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Employment Status",
                        "Employment Status Applies"});
            table273.AddRow(new string[] {
                        "ABC",
                        "in paid employment",
                        "02/08/2017"});
#line 647
        testRunner.And("the employment status in the ILR is:", ((string)(null)), table273, "And ");
#line hidden
            TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table274.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        "2"});
#line 650
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table274, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table275.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table275.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "500"});
            table275.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table275.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table275.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "0",
                        "500",
                        "500"});
            table275.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 653
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table275, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AC3- Provider earnings and payments where learner changes employer and there is a" +
            " gap between commitments - provider does not receive payment during the gap as t" +
            "hey amend the ACT code but do not amend the employment status code correctly.")]
        [NUnit.Framework.CategoryAttribute("LearnerChangesEmployerGapInCommitments")]
        public virtual void AC3_ProviderEarningsAndPaymentsWhereLearnerChangesEmployerAndThereIsAGapBetweenCommitments_ProviderDoesNotReceivePaymentDuringTheGapAsTheyAmendTheACTCodeButDoNotAmendTheEmploymentStatusCodeCorrectly_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC3- Provider earnings and payments where learner changes employer and there is a" +
                    " gap between commitments - provider does not receive payment during the gap as t" +
                    "hey amend the ACT code but do not amend the employment status code correctly.", new string[] {
                        "LearnerChangesEmployerGapInCommitments"});
#line 665
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 666
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 667
        testRunner.And("the apprenticeship funding band maximum is 17000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 668
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 669
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table276.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "03/08/2017"});
            table276.AddRow(new string[] {
                        "No employer",
                        "Non-DAS",
                        "03/10/2017"});
            table276.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "03/11/2017"});
#line 670
        testRunner.And("the learner changes employers", ((string)(null)), table276, "And ");
#line hidden
            TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Employer",
                        "Provider",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table277.AddRow(new string[] {
                        "1",
                        "1",
                        "ABC",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "15000",
                        "Active",
                        "01/08/2017",
                        "02/10/2017"});
            table277.AddRow(new string[] {
                        "1",
                        "2",
                        "ABC",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "15000",
                        "Withdrawn",
                        "03/10/2017",
                        ""});
            table277.AddRow(new string[] {
                        "2",
                        "1",
                        "XYZ",
                        "provider a",
                        "learner a",
                        "01/11/2017",
                        "04/08/2018",
                        "5625",
                        "Active",
                        "01/11/2017",
                        ""});
#line 675
        testRunner.And("the following commitments exist:", ((string)(null)), table277, "And ");
#line hidden
            TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "Provider",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table278.AddRow(new string[] {
                        "learner a",
                        "provider a",
                        "03/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017",
                        "4500",
                        "03/11/2017",
                        "1125",
                        "03/11/2017"});
#line 680
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table278, "When ");
#line hidden
            TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                        "contract type",
                        "date from",
                        "date to"});
            table279.AddRow(new string[] {
                        "DAS",
                        "03/08/2017",
                        "02/10/2017"});
            table279.AddRow(new string[] {
                        "Non DAS",
                        "03/10/2017",
                        "02/11/2017"});
            table279.AddRow(new string[] {
                        "DAS",
                        "03/11/2017",
                        "04/08/2018"});
#line 683
        testRunner.And("the Contract type in the ILR is:", ((string)(null)), table279, "And ");
#line hidden
            TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Employment Status",
                        "Employment Status Applies"});
            table280.AddRow(new string[] {
                        "ABC",
                        "in paid employment",
                        "02/08/2017"});
#line 688
        testRunner.And("the employment status in the ILR is:", ((string)(null)), table280, "And ");
#line hidden
            TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 09/17",
                        "10/17",
                        "11/17 onwards"});
            table281.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        "N/A",
                        "2"});
#line 691
         testRunner.Then("the data lock status will be as follows:", ((string)(null)), table281, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table282.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table282.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "500"});
            table282.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table282.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table282.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "0",
                        "500",
                        "500"});
            table282.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 694
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table282, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AC4-Provider earnings and payments where learner changes employer and there is a " +
            "gap between commitments - provider does not receive payment during the gap as th" +
            "ey amend the employment status code correctly but do not amend the ACT code.")]
        [NUnit.Framework.CategoryAttribute("LearnerChangesEmployerGapInCommitments")]
        public virtual void AC4_ProviderEarningsAndPaymentsWhereLearnerChangesEmployerAndThereIsAGapBetweenCommitments_ProviderDoesNotReceivePaymentDuringTheGapAsTheyAmendTheEmploymentStatusCodeCorrectlyButDoNotAmendTheACTCode_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC4-Provider earnings and payments where learner changes employer and there is a " +
                    "gap between commitments - provider does not receive payment during the gap as th" +
                    "ey amend the employment status code correctly but do not amend the ACT code.", new string[] {
                        "LearnerChangesEmployerGapInCommitments"});
#line 706
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 708
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 709
        testRunner.And("the apprenticeship funding band maximum is 17000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 710
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 711
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table283.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "03/08/2017"});
            table283.AddRow(new string[] {
                        "No employer",
                        "Non-DAS",
                        "03/10/2017"});
            table283.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "03/11/2017"});
#line 712
        testRunner.And("the learner changes employers", ((string)(null)), table283, "And ");
#line hidden
            TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Employer",
                        "Provider",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table284.AddRow(new string[] {
                        "1",
                        "1",
                        "ABC",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "15000",
                        "Active",
                        "01/08/2017",
                        "02/10/2017"});
            table284.AddRow(new string[] {
                        "1",
                        "2",
                        "ABC",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "15000",
                        "Withdrawn",
                        "03/10/2017",
                        ""});
            table284.AddRow(new string[] {
                        "2",
                        "1",
                        "XYZ",
                        "provider a",
                        "learner a",
                        "01/11/2017",
                        "04/08/2018",
                        "5625",
                        "Active",
                        "01/11/2017",
                        ""});
#line 717
        testRunner.And("the following commitments exist:", ((string)(null)), table284, "And ");
#line hidden
            TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "Provider",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table285.AddRow(new string[] {
                        "learner a",
                        "provider a",
                        "03/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017",
                        "4500",
                        "03/11/2017",
                        "1125",
                        "03/11/2017"});
#line 722
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table285, "When ");
#line hidden
            TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                        "contract type",
                        "date from",
                        "date to"});
            table286.AddRow(new string[] {
                        "DAS",
                        "03/08/2017",
                        "04/08/2018"});
#line 725
        testRunner.And("the Contract type in the ILR is:", ((string)(null)), table286, "And ");
#line hidden
            TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Employment Status",
                        "Employment Status Applies"});
            table287.AddRow(new string[] {
                        "ABC",
                        "in paid employment",
                        "02/08/2017"});
            table287.AddRow(new string[] {
                        "",
                        "not in paid employment",
                        "03/10/2017"});
            table287.AddRow(new string[] {
                        "XYZ",
                        "in paid employment",
                        "03/11/2017"});
#line 729
         testRunner.And("the employment status in the ILR is:", ((string)(null)), table287, "And ");
#line hidden
            TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table288.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        "2"});
#line 734
         testRunner.Then("the data lock status will be as follows:", ((string)(null)), table288, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table289.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table289.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "500"});
            table289.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table289.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table289.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "0",
                        "500",
                        "500"});
            table289.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 737
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table289, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AC5-Provider earnings and payments where learner changes employer and there is a " +
            "gap of more than 12 weeks between commitments - provider does not receive more t" +
            "han 12 weeks of payments during the gap.")]
        [NUnit.Framework.CategoryAttribute("LearnerChangesEmployerGapInCommitments")]
        public virtual void AC5_ProviderEarningsAndPaymentsWhereLearnerChangesEmployerAndThereIsAGapOfMoreThan12WeeksBetweenCommitments_ProviderDoesNotReceiveMoreThan12WeeksOfPaymentsDuringTheGap_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC5-Provider earnings and payments where learner changes employer and there is a " +
                    "gap of more than 12 weeks between commitments - provider does not receive more t" +
                    "han 12 weeks of payments during the gap.", new string[] {
                        "LearnerChangesEmployerGapInCommitments"});
#line 751
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 752
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 753
        testRunner.And("the apprenticeship funding band maximum is 17000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 754
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 755
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table290.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "03/08/2017"});
            table290.AddRow(new string[] {
                        "No employer",
                        "Non-DAS",
                        "09/10/2017"});
            table290.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "03/03/2018"});
#line 756
        testRunner.And("the learner changes employers", ((string)(null)), table290, "And ");
#line hidden
            TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Employer",
                        "Provider",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table291.AddRow(new string[] {
                        "1",
                        "1",
                        "ABC",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "15000",
                        "Active",
                        "01/08/2017",
                        "08/10/2017"});
            table291.AddRow(new string[] {
                        "1",
                        "2",
                        "ABC",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "15000",
                        "Withdrawn",
                        "09/10/2017",
                        ""});
            table291.AddRow(new string[] {
                        "2",
                        "1",
                        "XYZ",
                        "provider a",
                        "learner a",
                        "01/11/2017",
                        "04/08/2018",
                        "5625",
                        "Active",
                        "01/03/2018",
                        ""});
#line 761
        testRunner.And("the following commitments exist:", ((string)(null)), table291, "And ");
#line hidden
            TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "Provider",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table292.AddRow(new string[] {
                        "learner a",
                        "provider a",
                        "03/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017",
                        "4500",
                        "03/03/2018",
                        "1125",
                        "03/03/2018"});
#line 766
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table292, "When ");
#line hidden
            TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                        "contract type",
                        "date from",
                        "date to"});
            table293.AddRow(new string[] {
                        "DAS",
                        "03/08/2017",
                        "08/10/2017"});
            table293.AddRow(new string[] {
                        "Non DAS",
                        "09/10/2017",
                        "02/03/2018"});
            table293.AddRow(new string[] {
                        "DAS",
                        "03/03/2018",
                        "04/08/2018"});
#line 769
        testRunner.And("the Contract type in the ILR is:", ((string)(null)), table293, "And ");
#line hidden
            TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Employment Status",
                        "Employment Status Applies"});
            table294.AddRow(new string[] {
                        "ABC",
                        "in paid employment",
                        "02/08/2017"});
            table294.AddRow(new string[] {
                        "",
                        "not in paid employment",
                        "09/10/2017"});
            table294.AddRow(new string[] {
                        "XYZ",
                        "in paid employment",
                        "02/03/2018"});
#line 774
        testRunner.And("the employment status in the ILR is:", ((string)(null)), table294, "And ");
#line hidden
            TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "08/17 - 09/17",
                        "10/17",
                        "11/17 onwards"});
            table295.AddRow(new string[] {
                        "matching commitment",
                        "1",
                        "N/A",
                        "2"});
#line 780
        testRunner.Then("the data lock status will be as follows:", ((string)(null)), table295, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "01/18",
                        "02/18",
                        "03/18",
                        "04/18"});
            table296.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0",
                        "0"});
            table296.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0"});
            table296.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table296.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table296.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table296.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table296.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 783
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table296, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
