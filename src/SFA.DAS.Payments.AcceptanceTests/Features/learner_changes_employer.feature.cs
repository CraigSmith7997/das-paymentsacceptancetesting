// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Provider earnings and payments where a learner changes employers")]
    public partial class ProviderEarningsAndPaymentsWhereALearnerChangesEmployersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "learner_changes_employer.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Provider earnings and payments where a learner changes employers", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
    #line 4
        testRunner.Given("the apprenticeship funding band maximum is 17000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, and there is a change to" +
            " the Negotiated Cost which happens at the end of the month")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableAndThereIsAChangeToTheNegotiatedCostWhichHappensAtTheEndOfTheMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, and there is a change to" +
                    " the Negotiated Cost which happens at the end of the month", ((string[])(null)));
#line 6
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 7
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table52.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table52.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "01/11/2017"});
#line 10
        testRunner.And("the learner changes employers", ((string)(null)), table52, "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "actual end date",
                        "agreed price"});
            table53.AddRow(new string[] {
                        "ABC",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "31/10/2017",
                        "15000"});
            table53.AddRow(new string[] {
                        "XYZ",
                        "learner a",
                        "01/11/2017",
                        "31/08/2018",
                        "",
                        "5625"});
#line 14
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table54.AddRow(new string[] {
                        "learner a",
                        "01/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "01/08/2017",
                        "3000",
                        "01/08/2017",
                        "5000",
                        "01/11/2017",
                        "625",
                        "01/11/2017"});
#line 18
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table54, "When ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table55.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        "XYZ"});
#line 21
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table55, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table56.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table56.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table56.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table56.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table56.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "1000",
                        "500"});
            table56.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table56.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table56.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table56.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table56.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table56.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 24
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table56, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, and there is a change to" +
            " the Negotiated Cost which happens mid month")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableAndThereIsAChangeToTheNegotiatedCostWhichHappensMidMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, and there is a change to" +
                    " the Negotiated Cost which happens mid month", ((string[])(null)));
#line 39
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 40
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table57.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "04/08/2017"});
            table57.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "10/11/2017"});
#line 43
        testRunner.And("the learner changes employers", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "actual end date",
                        "agreed price"});
            table58.AddRow(new string[] {
                        "ABC",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "31/10/2017",
                        "15000"});
            table58.AddRow(new string[] {
                        "XYZ",
                        "learner a",
                        "01/11/2017",
                        "31/08/2018",
                        "",
                        "5625"});
#line 47
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table59.AddRow(new string[] {
                        "learner a",
                        "04/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "04/08/2017",
                        "3000",
                        "04/08/2017",
                        "5000",
                        "10/11/2017",
                        "625",
                        "10/11/2017"});
#line 51
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table59, "When ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table60.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        "XYZ"});
#line 54
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table60, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table61.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table61.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table61.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table61.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table61.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "1000",
                        "500"});
            table61.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table61.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table61.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table61.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table61.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table61.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 57
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table61, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, and there is a change to" +
            " the Negotiated Cost earlier than expected")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableAndThereIsAChangeToTheNegotiatedCostEarlierThanExpected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, and there is a change to" +
                    " the Negotiated Cost earlier than expected", ((string[])(null)));
#line 72
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 73
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table62.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "04/08/2017"});
            table62.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "10/11/2017"});
#line 76
        testRunner.And("the learner changes employers", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "actual end date",
                        "agreed price"});
            table63.AddRow(new string[] {
                        "ABC",
                        "learner a",
                        "01/08/2017",
                        "31/08/2018",
                        "31/10/2017",
                        "15000"});
            table63.AddRow(new string[] {
                        "XYZ",
                        "learner a",
                        "01/11/2017",
                        "31/08/2018",
                        "",
                        "5625"});
#line 80
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table64.AddRow(new string[] {
                        "learner a",
                        "04/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "04/08/2017",
                        "3000",
                        "04/08/2017",
                        "5000",
                        "25/10/2017",
                        "625",
                        "25/10/2017"});
#line 84
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table64, "When ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 09/17",
                        "10/17 onwards"});
            table65.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        ""});
#line 87
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table65, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table66.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "450",
                        "450",
                        "450"});
            table66.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "450",
                        "450",
                        "450"});
            table66.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table66.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table66.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table66.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table66.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table66.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table66.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table66.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0"});
            table66.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 90
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table66, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, where a learner switches" +
            " from DAS to Non Das employer at the end of month")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableWhereALearnerSwitchesFromDASToNonDasEmployerAtTheEndOfMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, where a learner switches" +
                    " from DAS to Non Das employer at the end of month", ((string[])(null)));
#line 105
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 106
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table67.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "03/08/2017"});
            table67.AddRow(new string[] {
                        "XYZ",
                        "Non DAS",
                        "03/11/2017"});
#line 108
        testRunner.And("the learner changes employers", ((string)(null)), table67, "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "actual end date",
                        "agreed price"});
            table68.AddRow(new string[] {
                        "ABC",
                        "learner a",
                        "03/08/2017",
                        "04/08/2018",
                        "02/11/2017",
                        "15000"});
#line 112
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table69.AddRow(new string[] {
                        "learner a",
                        "03/08/2017",
                        "04/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017",
                        "4500",
                        "03/11/2017",
                        "1125",
                        "03/11/2017"});
#line 115
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table69, "When ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "contract type",
                        "date from",
                        "date to"});
            table70.AddRow(new string[] {
                        "DAS",
                        "03/08/2017",
                        "02/11/2017"});
            table70.AddRow(new string[] {
                        "Non DAS",
                        "03/11/2017",
                        "04/08/2018"});
#line 118
        testRunner.And("the Contract type in the ILR is:", ((string)(null)), table70, "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table71.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        ""});
#line 122
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table71, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table72.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table72.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "450"});
            table72.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table72.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "50"});
            table72.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table72.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table72.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table72.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table72.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "0"});
            table72.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 125
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table72, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, commitment entered for a" +
            " new employer in the middle of the month, and there is a change to the employer " +
            "and negotiated cost in the middle of a month in the ILR")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableCommitmentEnteredForANewEmployerInTheMiddleOfTheMonthAndThereIsAChangeToTheEmployerAndNegotiatedCostInTheMiddleOfAMonthInTheILR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, commitment entered for a" +
                    " new employer in the middle of the month, and there is a change to the employer " +
                    "and negotiated cost in the middle of a month in the ILR", ((string[])(null)));
#line 142
    this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 143
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 144
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table73.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table73.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "15/11/2017"});
#line 146
        testRunner.And("the learner changes employers", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "actual end date",
                        "agreed price"});
            table74.AddRow(new string[] {
                        "ABC",
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "14/11/2017",
                        "15000"});
            table74.AddRow(new string[] {
                        "XYZ",
                        "learner a",
                        "15/11/2017",
                        "28/08/2018",
                        "",
                        "5625"});
#line 150
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table74, "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table75.AddRow(new string[] {
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "01/08/2017",
                        "3000",
                        "01/08/2017",
                        "5000",
                        "15/11/2017",
                        "625",
                        "15/11/2017"});
#line 154
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table75, "When ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table76.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        "XYZ"});
#line 157
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table76, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table77.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table77.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table77.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table77.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table77.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "1000",
                        "500"});
            table77.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table77.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table77.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table77.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table77.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table77.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 160
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table77, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Earnings and payments for a DAS learner, levy available, commitment entered for a" +
            " new employer in the middle of the month with gap, and there is a change to the " +
            "employer and negotiated cost in the middle of a month in the ILR")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableCommitmentEnteredForANewEmployerInTheMiddleOfTheMonthWithGapAndThereIsAChangeToTheEmployerAndNegotiatedCostInTheMiddleOfAMonthInTheILR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Earnings and payments for a DAS learner, levy available, commitment entered for a" +
                    " new employer in the middle of the month with gap, and there is a change to the " +
                    "employer and negotiated cost in the middle of a month in the ILR", ((string[])(null)));
#line 175
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 176
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table78.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table78.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "15/11/2017"});
#line 179
        testRunner.And("the learner changes employers", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "actual end date",
                        "agreed price"});
            table79.AddRow(new string[] {
                        "ABC",
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "14/11/2017",
                        "15000"});
            table79.AddRow(new string[] {
                        "XYZ",
                        "learner a",
                        "15/11/2017",
                        "28/08/2018",
                        "",
                        "5625"});
#line 183
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table80.AddRow(new string[] {
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "01/08/2017",
                        "3000",
                        "01/08/2017",
                        "5000",
                        "25/11/2017",
                        "625",
                        "25/11/2017"});
#line 187
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table80, "When ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table81.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        "XYZ"});
#line 190
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table81, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table82.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table82.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table82.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table82.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table82.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "",
                        "1000",
                        "1000",
                        "1000",
                        "500"});
            table82.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table82.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table82.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table82.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "500"});
            table82.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table82.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 193
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table82, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(@"Earnings and payments for a DAS learner, levy available, commitment entered for a new employer in the middle of the month and ILR file is submitted before new price episode, and there is a change to the employer and negotiated cost in the middle of a month in the ILR")]
        public virtual void EarningsAndPaymentsForADASLearnerLevyAvailableCommitmentEnteredForANewEmployerInTheMiddleOfTheMonthAndILRFileIsSubmittedBeforeNewPriceEpisodeAndThereIsAChangeToTheEmployerAndNegotiatedCostInTheMiddleOfAMonthInTheILR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"Earnings and payments for a DAS learner, levy available, commitment entered for a new employer in the middle of the month and ILR file is submitted before new price episode, and there is a change to the employer and negotiated cost in the middle of a month in the ILR", ((string[])(null)));
#line 208
this.ScenarioSetup(scenarioInfo);
#line 3
    this.FeatureBackground();
#line 209
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 210
        testRunner.And("the ABC has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
        testRunner.And("the XYZ has a levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Type",
                        "ILR employment start date"});
            table83.AddRow(new string[] {
                        "ABC",
                        "DAS",
                        "01/08/2017"});
            table83.AddRow(new string[] {
                        "XYZ",
                        "DAS",
                        "15/11/2017"});
#line 212
        testRunner.And("the learner changes employers", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "ULN",
                        "price effective date",
                        "planned end date",
                        "actual end date",
                        "agreed price"});
            table84.AddRow(new string[] {
                        "ABC",
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "14/11/2017",
                        "15000"});
            table84.AddRow(new string[] {
                        "XYZ",
                        "learner a",
                        "15/11/2017",
                        "28/08/2018",
                        "",
                        "5625"});
#line 216
        testRunner.And("the following commitments exist on 03/12/2017:", ((string)(null)), table84, "And ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date",
                        "Residual training price",
                        "Residual training price effective date",
                        "Residual assessment price",
                        "Residual assessment price effective date"});
            table85.AddRow(new string[] {
                        "learner a",
                        "01/08/2017",
                        "28/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "01/08/2017",
                        "3000",
                        "01/08/2017",
                        "5000",
                        "05/11/2017",
                        "625",
                        "25/11/2017"});
#line 220
        testRunner.When("an ILR file is submitted on 03/12/2017 with the following data:", ((string)(null)), table85, "When ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17 - 10/17",
                        "11/17 onwards"});
            table86.AddRow(new string[] {
                        "Matching commitment",
                        "ABC",
                        ""});
#line 223
        testRunner.Then("the data lock status of the ILR in 03/12/2017 is:", ((string)(null)), table86, "Then ");
#line 226
        testRunner.And("a DLOCK_09 error message will be produced", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table87.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table87.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "500",
                        "500"});
            table87.AddRow(new string[] {
                        "Provider Earned from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table87.AddRow(new string[] {
                        "Provider Earned from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table87.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table87.AddRow(new string[] {
                        "Payment due from ABC",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table87.AddRow(new string[] {
                        "Payment due from XYZ",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table87.AddRow(new string[] {
                        "ABC Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table87.AddRow(new string[] {
                        "XYZ Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table87.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table87.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 227
        testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table87, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
